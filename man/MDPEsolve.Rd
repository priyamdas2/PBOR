% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/MDPEsolve.R
\name{MDPEsolve}
\alias{MDPEsolve}
\title{Minimum Divergence Power Estimation (MDPE) Solver}
\usage{
MDPEsolve(
  param1,
  param2 = 1,
  fixed_param1 = 10,
  fixed_param2 = 3,
  dist = "normal",
  X_array,
  alpha,
  center_vec,
  sigma_vec,
  max_time = 3600,
  default_ranges = TRUE,
  l_bound = c(0, 0),
  u_bound = c(1, 1),
  rho = 2,
  phi = 10^(-20),
  no_runs = 1000,
  max_iter = 5e+05,
  s_init = 1,
  tol_fun = 10^(-20),
  tol_fun_2 = 10^(-20)
)
}
\arguments{
\item{param1}{Initial value of first parameter : Normal (mean), Exponential (mean),
Beta (first parameter), Gamma (shape), lognormal (mean of normal), Poisson (mean),
Geometric (p), Binomial (p), Negative binomial (p).}

\item{param2}{Initial value of second parameter : Normal (sigma), Beta (second parameter),
Gamma (scale), lognormal (sigma of normal). Default value is 1.}

\item{fixed_param1}{First fixed parameter values : Binomial (n), Poisson (approx. sum upto),
Geometric (approx. sum upto), Negative binomial (approx. sum upto). Default value is 10.}

\item{fixed_param2}{Second fixed parameter values : Negative binomial (r). Default value
is 3.}

\item{dist}{Distribution of sample : "normal", "exp", "beta", "gamma", "lognormal",
"poisson", "geometric", "binomial", "negbinomial". Default value is "normal".}

\item{X_array}{Array of values in sample.}

\item{alpha}{Parameter of Power estimator, value must be between 0 and 1.}

\item{center_vec}{Mean vector of prior normal distribution. It can be set at the
neighborhood where the true parameter value is expected.}

\item{sigma_vec}{The standard deviation vector of the prior normal distribution.}

\item{max_time}{Maximum time (in seconds) alloted for optimization. Default value is 3600.}

\item{default_ranges}{'TRUE' for keeping the default ranges of the distribution
paramaters, e.g., in case of normal distribution, the default ranges of mu and sigma
are (-Inf, Inf) and (0, Inf) respectively. In case solution needs to be found within a
specific interval, it should be set 'FALSE' and 'l_bound', 'u_bound' should be set
accordingly. Default value is TRUE.}

\item{l_bound}{Lower bound for parameter vector, to activate this bound, user must set
'default_ranges' to be FALSE. Default value is c(0,0).}

\item{u_bound}{Upper bound for parameter vector, to activate this bound, user must set
'default_ranges' to be FALSE. Default value is c(1,1).}

\item{rho}{Step Decay Rate with default value 2}

\item{phi}{Step size threshold, i.e., lower Bound Of Global Step Size. Default value is \eqn{10^{-20}}}

\item{no_runs}{Maximum number of runs to be executed, default value is 1000.}

\item{max_iter}{Max Number Of Iterations in each Run. Default Value is 10000.}

\item{s_init}{Initial Global Step Size. Default Value is 1.}

\item{tol_fun}{Termination Tolerance on the function value. Default Value is \eqn{10^{-20}}}

\item{tol_fun_2}{Termination Tolerance on the difference of solutions in two consecutive
runs. Default Value is \eqn{10^{-20}}.}
}
\value{
A list of length two.
\itemize{
\item \code{theta:} The solution point where DPE is minimized.
\item \code{value:} Value of MDPE.
}
}
\description{
\code{MDPEsolve} function estimates the minimum divergence power estimator for list of
distributions. This function uses a Blackbox optimization technique, which is a
variant of Pattern search, known as Prior Based Optimization Routine (PBOR).
}
\examples{
X_array <- rnorm(10)
center_vec <- c(0,0)
sigma_vec <- c(10^4, 10^4)
alpha <- 0.5
MDPEsolve(param1 = 0.1, param2 = 5, dist = "normal", default_ranges = TRUE, X_array = X_array, alpha = 0.5,
          center_vec = center_vec, sigma_vec = sigma_vec)

X_array <- rexp(5, rate = 1/5)
alpha <- 0.7
MDPEsolve(0.1, 0, dist = "exp", default_ranges = TRUE, X_array = X_array, alpha = 0.5,
          center_vec = center_vec, sigma_vec = sigma_vec)

X_array <- rbeta(150, 2, 3)
alpha <- 0.5
MDPEsolve(2, 2, dist = "beta", default_ranges = FALSE,l_bound = c(1/(1+alpha),1/(1+alpha)),
          u_bound = c(10,10),X_array = X_array, alpha = 0.5,center_vec = center_vec,
          sigma_vec = sigma_vec)

X_array <- rgamma(5, shape = 2, scale = 3) ## k (shape) > alpha/(1+alpha)
alpha <- 0.75
MDPEsolve(2, 2, dist = "gamma", X_array = X_array, alpha = 0.5,center_vec = center_vec,
          sigma_vec = sigma_vec)

X_array <- rlnorm(5, meanlog = 5, sdlog = 1) ## MUST BE RUN within a domain
MDPEsolve(2, 2.5, dist = "lognormal", l_bound = c(1,2),u_bound = c(10,10), default_ranges = FALSE,
          X_array = X_array, alpha = 0.5,center_vec = center_vec, sigma_vec = sigma_vec)

X_array <- rpois(50, 3)
alpha <- 0.25
MDPEsolve(param1 =2, param2 =2, fixed_param1 = 1000, dist = "poisson", X_array = X_array, alpha = 0.5,
          center_vec = center_vec, sigma_vec = sigma_vec)

X_array <- rgeom(50, 0.6)
alpha <- 0.5
MDPEsolve(param1 = 0.3, fixed_param1 = 1000, dist = "geometric", X_array = X_array,
          alpha = 0.5,center_vec = center_vec, sigma_vec = sigma_vec)

X_array <- rbinom(100,8,0.6)
alpha <- 0.15
MDPEsolve(param1 = 0.3, fixed_param1 = 8, dist = "binomial", X_array = X_array, alpha = 0.5,
          center_vec = center_vec, sigma_vec = sigma_vec)


X_array <- rnbinom(100,8,0.6) ## k
alpha <- 0.65
MDPEsolve(param1 = 0.3, fixed_param1 = 1000, fixed_param2 = 30, dist = "negbinomial",
          X_array = X_array, alpha = 0.5,center_vec = center_vec, sigma_vec = sigma_vec)

}
\references{
Das, P. and Ghosh, A. (2021). \emph{PBOR paper}. Future Journal, 2, 63-74.
}
\author{
Priyam Das (maintainer) (\email{priyam_das@hms.harvard.edu}), Abhik Ghosh.
}
